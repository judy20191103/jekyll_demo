回顾javascript的组成
javascript由三部分组成
   ECMAscript（javascript核心标准，也是一个解释器）
   DOM(通过document提供的一些方法或者属性来操作页面)
   BOM(通过window提供的一些方法或者属性来操作页面)
   
   DOM(Document Object Model) 文档对象模型，整个页面文档
   官方解释：W3C组织推荐的处理可扩展标志语言的标准编程接口，在网页上，组织页面（或者文档）的对象被组织在
   一个树形结构中，用来表示文档对象的标准模型称为DOM
   
   简单点来说：
       DOM通过document提供一些能够操作页面内容的属性或者方法，赋予开发者操纵页面的能力。
       
       按层级划分：父节点，子节点，兄弟节点。
       父子节点：上下两层节点之间的关系。
       祖先节点：当前节点上面的所有节点的统称。
       子孙节点：当前结点下面的所有节点的统称。
       
       一般分为三大关系：
       父级关系：只有一层上下级关系（从当前往上找）
       子级关系：只有以下一层的关系
       兄弟关系：同一个父级（同一级）
       
       节点的类型：
       noteType属性返回节点类型的常数值。不同的类型对应不同的常数值，12种类型分别对应1到12的常数值
       note.noteType; 获取某个元素的
       元素节点  1
       属性节点  2
       文本节点  3
       注释节点 8
       childNodes:某数字
       获取某个节点下的所有子节点
       nodeValue:获取节点的属性值
       nodeName:查看节点的属性名
       
    //	var lis = ul.childNodes;
	var lis = ul.children;//lis.length=5
	/*
		children:不是标准的属性，但是所有浏览器都支持。
		找到某个元素下个所有元素子节点。
	*/
	
	console.log(lis.length)
	
	document.onclick = function(){
		for(var i=0;i<lis.length;i++){
			lis[i].style.width = '150px';
//			if(lis[i].nodeType === 1){
//				lis[i].style.width = '150px';
//			}
		}
	}
	
 //nextElementSibling 某个元素的下个兄弟子节点
 //previousElementSibling 某个元素的上个兄弟子节点
 //
   var ul=document.getElementById("ul");
    var lis=ul.children;
    lis[0].nextElementSibling.style.background="red";
	
    ul.firstElementChild.style.background="yellow";//ul的第一个元素子节点 在ie678中不兼容
    ul.lastElementChild.style.background="blue";//ul的最后一个元素子节点
    firstChild; 父级标签下的第一个子节点，并不一定是元素子节点
    
    总结：以后写js的时候，如果想获取到子元素的element节点，最好使用children方法以及firstChild方法在现代浏览器中使用，
    都会把元素标签中的空白节点检测出来，一般我们使用这两个方法都是为了获取元素的子元素节点，空白节点会给我们造成很多不必要的bug
    而children方法则是只检测element元素节点，防范于未然，所以推荐以后是哟个children方法代替childNodes
    
    /************************节点例子***********************************/
    <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
    <style>
    /*先在css中把修改的样式集中写在class中，修改的时候直接修改类名即可
        ul{
            width:200px;
        }
        li{
            color:#666;
            background:#eee;
            font-weight:bold;
            font-size:14px;
            height:30px;
            line-height:30px;
            padding:0 20px;
            list-style:none;

        }
        ul .focus{
            font-size:22px;
            background:#555;
            color:#fff;
        }
        ul .near{
            font-size:18px;
            background:#ccc;
            color:blue;
        }
        ul .none{
            background:#333;
            color:#fff;
        }
        ul .side{
            background:orange;
        }

    </style>
</head>
<body>
<ul id="ul1">
    <li class="none">这是首行</li>
    <li>1111</li>
    <li>2222</li>
    <li>3333</li>
    <li>4444</li>
    <li>5555</li>
    <li>6666</li>
    <li>7777</li>
    <li>8888</li>
    <li>9999</li>
    <li>1010</li>
    <li class="none">这是尾行</li>
</ul>

<script>
    var ul=document.getElementById("ul1");
    var li=ul.children;
    var first=ul.firstElementChild;
    var last=ul.lastElementChild;

    for(var i=0;i<li.length;i++){
     
        li[i].onmouseover=function () {
            //第二步
            if(this==first||this==last){
                this.className="side";
            }
            else{  
                //第一步
                this.className="focus";
                this.previousElementSibling.className=this.nextElementSibling.className="near";
                first.className=last.className="none";
                /*this.previousElementSibling.className="near";
                this.nextElementSibling.className="near";
                first.className="none";
                last.className="none";*/
            }
        };
        //第三步
        li[i].onmouseout=function () {
            for(var i=0;i<li.length;i++){
                li[i].className="";
            }
            first.className="none";
            last.className="none";
        }
    }
</script>
</body>
</html>
    
    
    
    
    
    
    
    
    
    
    
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
