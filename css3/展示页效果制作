1:封装函数根据传入的n值进行图片切换
使第n个图片在页面中部显示，让上一张和下一张分别居于两侧

2:明确点击时切换到上一张还是下一张
根据当前居中显示的图片的点击的图片的索引关系，确定切换时的方向

3：封装上一张切换和下一张切换的函数
4：解决多次点击的问题

perspective 属性指定了观察者与z=0平面的距离，使具有三维位置变换的元素产生透视效果。z>0的三维元素比正常大，而z<0时则比正常小，大小程度由该属性的值决定。
三维元素在观察者后面的部分不会绘制出来，即z轴坐标值大于perspective属性值的部分。
默认情况下，消失点位于元素的中心，但是可以通过设置perspective-origin属性来改变其位置。
属性值为0或负值或none（none是默认值）时，没有透视效果。
CS3中的Transform是设置界面样式和动画的一大利器。而且在Chrome和FF中还支持3D变换。IE9不支持，IE10支持。
只要是3D场景都会涉及视角问题和透视的问题。在Transform中的设置方法比较简单：
只能选择透视方式，也就是近大远小的显示方式。
镜头方向只能是平行Z轴向屏幕内，也就是从屏幕正前方向里看。
可以调整镜头与平面位置：
a) perspective属性设置镜头到元素平面的距离。所有元素都是放置在z=0的平面上。比如perspective(300px)表示，镜头距离元素表面的位置是300像素。
b) perspective-origin属性规定了镜头在平面上的位置。默认是放在元素的中心。

总结：perspective的意义在于设置远近点大小的比例，让它产生3D感，但是并不改变物体在transform-origin处的大小。

/**************************************************************************************************/


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
    <style>
        body{
            margin:0;
            background:#999;
        }
        #wrap{
            height:500px;
            background:url(img-02/bg.png) no-repeat center;
            background-size:1800px 500px;
            position:relative;
            transform-style:preserve-3d;
            perspective:800px; //设置景深，镜头拉近，才显示处页面的3d效果，有旋转角度，如不设置，看不出角度犹如平面
            margin-top:100px;
        }
        img{
            border:none;
            vertical-align:top;//img的css reset
        }
        #wrap img{
            width:300px;
            height:200px;
            position:absolute;
            left:50%;//居中设置
            top:50%;
            margin-left:-150px;
            margin-top:-100px;
            transition:0.7s ease-in-out; //transition:如何一个html标签的任意一个属性值发挥说呢个变化都会有一个变化时间
        }
    </style>
</head>
<body>
<div id="wrap">
    <img src="img-02/0.png"/>
    <img src="img-02/1.png"/>
    <img src="img-02/2.png"/>
    <img src="img-02/3.png"/>
    <img src="img-02/4.png"/>
    <img src="img-02/5.png"/>
    <img src="img-02/6.png"/>
</div>
<script>
    var imgs=document.getElementsByTagName("img");
    var now=3;
    var target;
    var onOff=true;
   //tab(3)
  
    setTimeout(function () {
        tab(now);
    },100);

    for(var i=0;i<imgs.length;i++){
        imgs[i].index=i;
        imgs[i].onclick=function () {
            if(!onOff){ //4，解决多次点击图片的问题， 开关已经打开=true，不能对它进行任何操作，解决多次点击图片错位混乱的问题
                return;
            }
            onOff=false;//开关已经开启
            target=this.index;
            //首选方案出的问题，也就是说如何一开始运行的时候我们设置为了goNext()，现在要根据target和now的距离来判断如何运行走
            //使得我们点击的页面走到最中间的距离是最近的，注意now=0/3/6...设置值进行调试的时候要多考虑极值情况
            if(target>now){
               target-now<=3?goNext():goPrev();
            }
            else{
               target+7-now<=3?goNext():goPrev();
            }
        }
    }
    //3 封装图片的上下切换的问题 ，goNext()和goPrev()的函数的功能其实是一样的，用来切换图片，但是方向不一样，本来想合并成一个函数，
    //但是其中用到递归，又觉得不方便
    function goNext() {
        now++;
        if(now>6){
            now=0;
        }
        tab(now);
        if(now==target){ //运动完成
            onOff=true;//当达成某个条件的时候，把开关复位为true,这相当于用一个开关来监督一个运动过程
            return;
        }
        setTimeout(function () {
            goNext(); //这里使用了递归
        },700)
    }
    function goPrev() {
        now--;
        if(now<0){
            now=6;
        }
        tab(now);
        if(now==target){ //运动完成
            onOff=true;
            return;
        }
        setTimeout(function () {
            goPrev();
        },700)
    }
    //1:封装函数根据传入的n值进行图片切换，就是如何设置整个页面的显示问题，n为中间，left,right分置两边
    function tab(n) {
        for(var i=0;i<3;i++){
            var left=n-1-i;
            var right=n+1+i;
            if(left<0){
                left=left+7;
            }
            if(right>6){
                right=right-7;
            }
            //translateZ;值大的显示在最前面，就是离镜头最近，两边的图片的镜头距离对称低于中间
            imgs[left].style.transform = "translateX("+(-150*(i+1))+"px) translateZ("+(200-i*100)+"px) rotateY(30deg)";
            imgs[right].style.transform = "translateX("+(150*(i+1))+"px) translateZ("+(200-i*100)+"px) rotateY(-30deg)";
        }
        imgs[n].style.transform="translateZ(300px)";
    }
     
</script>
</body>
</html>

