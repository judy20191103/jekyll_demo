1：函数嵌套函数，内部函数可以引用外部函数的参数和变量,参数和变量不会被垃圾回收机制所收回
function fn(a){
  var b=5;  // a,b都不会被垃圾回收机制回收，因为它们都被闭包fn2引用
  function fn2(){
    alert(a);
    alert(b);
    }
 }
 fn();
 
 2:闭包的好处
 （1）希望一个变量长期驻扎在内存中
 （2) 避免全局变量的污染
 
 3.用法：模块化代码（函数表达式）
 function aa(){
    var a=1;
    return function(){
    a++;
    alert(a);
   }
 }
 var b=aa();
 b();//2
 b();//3
 把函数声明改写成函数表达式
 var aa=(function(){
     var a=1;
     return function(){
      a++;
      alert(a);
      }
   })();
   aa();//2
   aa();//3
   
   
   var aaa=(function(){
      var a=1;
      function bbb(){
      a++;
      alert(a);
      }
      function ccc(){
      a++;
      alert(a);
      }
      return {
      b:bbb,
      c:ccb
      }
     aaa.b();//2
     aaa.c();//3
     alert(a);//undefined
     alert(bbb);//undefined
      alret(ccc);//undefined
     一个模块化代码的模型
     bbb()，ccc()同时可以操作a,a相对于这两个函数就是一个全局变量
     
      var oli=document.getElementsByTagName("li");
      for(var i=0;i<oli.length;i++){
         oli[i].oncick=function(){//当for循环结束后该代码，鼠标点击的时候才执行
           alert(i);
           }
         }
      
      改写1：利用闭包
      for(var i=0;i,oli.length;i++){
        (function(i){
          oli[i].onclick=function(){
           alert(i);
           };
           })(i);
        }
       改写2：利用return
       for(var i=0;i<oli.length;i++）{
        oli[i].onclick=(function(i){
         return function(){
         alert(i);//外部函数循环结束之后,内部的i也驻扎在内存中
         }
         })(i);
         
         3：闭包需要注意的地方，ie下回引发内存泄露
         
       Iwindow.onload=function(){
         var oDiv=document.getElementById("div1");
         oDiv.onclick=function(){
         alert(oDiv.id);
         };
         oDiv=null;置为空也可以释放内存
         //从document中获取的标签，除非浏览器关闭才会释放内存，该情况下ie容易泄露内存
         //释放内存
         window.onunload=function(){
         oDiv.onclick=null;
         }
         
      
      
      
      
      
      
      
      
      
      
      
