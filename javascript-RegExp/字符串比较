正则表达式：也叫做规则，让计算合计能够读懂人类的规则
正则都是用来操作字符串的。

正则表达式的写法：
类似于数组和对象都有两种写法
var arr=[], var arr=ew Array();
var obj={}, var obj=new Object();
var reg=/a/;//鼓励用该种方法，性能较好
var reg=new RegExp('a');//只有在向函数传参的形况下才有这种
\s 空格
\S 非空格
\d 数字
\D非数字
\w 字符 （数字，字母，下划线）
\W 非字符
\b 独立部分:起始，结束，空格
\B 非独立部分

量词:{}
{4,7}:最少出现4次，最多出现7次
{4,}:最少出现4次
{4}正好出现4次

+：{1，}至少出现1次
？：{0，1} 出现0次或者1次
*：{0，}：至少出现0次

^:正则的最开始位置，代表起始的意思
$:正则的最后位置，代表末尾的意思

高级表单校验
匹配中文：[\u4e00-\u9fa5]
行首行尾空格：^\s*|\s*$
Email：^\w+@[a-z0-9]+(\.[a-z]+){1,3}$
网址：[a-zA-z]+://[^\s]*
QQ号：[1-9][0-9]{4,9}
邮政编码：[1-9]\d{5}
身份证：[1-9]\d{14}|[1-9]\d{17}|[1-9]\d{16}x



例子：找出一串字符串中的全部数字
方法一：普通写法
var str= 'haj123sdk54hask33dkhalsd879';
    function findNum(str) {
        var arr=[];
        var temp="";
        for(var i=0;i<str.length;i++){
            if(str.charAt(i)<='9'&&str.charAt(i)>='0'){
                //arr.push(str.charAt(i)); //1,2,3,5,4,3,3,8,7,9
                temp+=str.charAt(i);
            }
            //非数字走else
            else{
                //如果有数字串则压入数组
                if(temp){
                    arr.push(temp);
                    temp="";//清空，再去存储数字串
                }
            }
        }
        //最后一个是数字串的可能，如果存有就压入数组
        if(temp){
            arr.push(temp);
            temp="";
        }
        return arr;
    }
    alert(findNum(str));

方法二：正则写法
var str= 'haj123sdk54hask33dkhalsd879';
    function findNum(str) {
        return str.match(/\d+/g);
    }
    alert(findNum(str));//123,54,33,879
    
  总结：这样看来对于同一个问题，正则表达式的写法的确代码量比普通代码的写法要简短很多，性能
  也更加优越，从这个例子来理解的话，正则就是根据题目的要求抽取出一个规则让计算机根据这个规则去完成
  任务。
  
  /******************************************************************/
  正则表达式的方法一
  test:正则去匹配字符串，如果匹配成功就返回真，如果匹配不成功就返回假
  test写法
  正则.test(str)
   /* var str="abcdef";
   var re=/bd/g;
   alert(re.test(str));*/false
   
  search:正则去匹配字符串，如果匹配成功，就返回匹配成功的第一个字符的位置，匹配失败就返回-1
  search的写法：str.search(正则)
  正则中的默认是区分大小写的,如果不区分大小写的话，在正则的最后加上标识i
  var str="abcdef";
   var re=/B/i;
   alert(str.search(re));//1
   
   match:正则去匹配字符串，如果匹配成功，就返回匹配成功的数组，如果匹配不成功，就返回null;
   match的写法：字符串.match(正则)
   正则默认：正则匹配成功就会结束，不会继续匹配
   如果想全部查找，就要加上标识g(全局匹配）
   
   量词，匹配不确定的位置
   +:至少出现一次
   var str='haj123sdk54hask33dkhalsd879';
   var re=/\d+/g;
   alert(str.match(re));//123,54,33,879
   
   
   replace:正则去匹配字符串，匹配成功的字符去替换成新的字符串
   replace的写法: 字符串.replace(正则，新的字符串）
   var str='aaaddda';
   var re=/a+/g;
   str=str.replace(re,'b');
   alert(str);//b a+相当于所有连续出现的a相当于一个整体转化成b

/************************************************/
敏感词过滤
<script>
        window.onload=function () {
            var textAreas=document.getElementsByTagName("textarea");
            var btn=document.getElementById("btn");
            var re=/菲称|中国船|监视之下/g;
            textAreas[0].value="菲称仁爱礁附近17艘中国船均在菲军监视之下";
            btn.onclick=function () {
              //  textAreas[1].value=textAreas[0].value.replace(re,'*');
                //如果replace()不设置第二个参数，将默认为undefined,第二个参数可以是字符串也可以是回调函数
                //
                textAreas[1].value=textAreas[0].value.replace(re,function (str) {
                    //回掉函数的第二个参数就是匹配成功的字符
                    var result="";
                    for(var i=0;i<str.length;i++){
                        result+='*';
                    }
                    return result;//**仁爱礁附近17艘***均在菲军****
                })
            }
        }
    </script>
</head>
<body>
替换前<br/>
<textarea>
</textarea><br/>
替换后<br/>
<textarea>
</textarea><br/>
<input type="button" value="确定" id="btn"/>

/*************************************************/
匹配子项
 window.onload=function () {
            var str="2017-12-30";
            var reg=/(\d+)(-)/g;
            str=str.replace(reg,function ($0,$1,$2) {
                //第一个参数，$0(母亲，字符串),$1:第一个子项，$2:第二个子项
                //return $1+'.'
                return $0.substring(0,$0.length-1)+".";
            });
            alert(str);
  
   var str2="abc";
  var re=/(a)(b)(c)/g;
  alert(str2.match(re));//abc,a,b,c返回的第一项是正则整体，然后才返回匹配的每个子项
  //abc 加上g全局标识的时候就只返回正则re
  
  /*************************************************************/
  字符类：一组相似的元素，[]中括号的整体代表一个字符
       /* var str='abc';
        var re=/a[bde]c/;//字符类中的字符是或的关系，整个re可以匹配成功abc,adc,aec
        alert(re.test(str));//true*/

       //排除:^如果写在[]里面就代表是排除的意思
       /* var str='abc';
        var re=/a[^de]c/;
        alert(re.test(str));//true
        */
       var str='abc';
       var re=/a[a-z0-9A-Z]c/;
       alert(re.test(str));
       
       /****************************************************************/
          var re = /<[^>]+>/g;//匹配标签
         //\b:独立的部分（起始，结束，空格
            //\B:非独立的部分
            var str="onetwo";
            //var re=/\bone/;//true
            //var re=/one\b/;false;因为不是以one结尾

/********************************************************************************/
获取class的方法
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
    <script>
        window.onload=function () {
            var ali=getByClass(document,'box1');
            for(var i=0;i<ali.length;i++){
                ali[i].style.background='red';
            }

            function getByClass(parent,sClass) {
                var arr=[];
                var aEle=parent.getElementsByTagName('*');
                var reg=new RegExp('\\b'+sClass+'\\b');//当需要传入参数的时候，正则
                //就需要以new的形式
                for(var i=0;i<aEle.length;i++){
                    if(reg.test(aEle[i].className)){
                        arr.push(aEle[i]);
                    }
                }
                return arr;
            }
        }
    </script>
</head>
<body>
<ul>
    <li class="box1">111</li>//red
    <li>111</li>
    <li class="box1box2">111</li>
    <li>111</li>
    <li class="box3 box1 box2">111</li>//red
</ul>

</body>
</html>
/***********************************************************/*

 window.onload=function () {
           /* var aInput=document.getElementsByTagName("input");
            var reg=/^[1-9]\d{4,9}$/;
            aInput[1].onclick=function () {
                if(reg.test(aInput[0].value)){
                    alert("it is qq number");
                }
                else{
                    alert("it it not qq number");
                }
            }*/

           var str=" hello   ";
           alert('('+trim(str)+')');
           function trim(str) {
               var reg=/^\s+|\s+$/g;//不要漏掉全局匹配
               return str.replace(reg,'');
           }
        }
/***************************************************************/*




