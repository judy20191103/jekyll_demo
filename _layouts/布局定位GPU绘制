静态布局：针对某个屏幕设计的网页，当屏幕大小改变时，页面布局不会发生变化，就像经常看到的滚动条。
自适应布局： 特点时分别为不同的屏幕设置布局格式，当屏幕大小改变时，会出现不同的布局，意思就是在这个屏幕下
这个元素块在这个地方，但是在那个屏幕下，这个元素块又会出现在那个地方。只是布局改变，元素不变。可以看成时不同屏幕下由
多个静态布局组成的。
流式布局：特点是随着屏幕的改变，页面的布局没有发生大的变化，可以正好与自适应布局互补
响应式布局：意思就是分别为不同的屏幕设计的布局方式，可以理解成自适应布局和流程布局的结合。

布局
呈现器在创建完成并添加到呈现树时，并不包含位置和大小信息。计算这些值的过程称为布局或重排。
HTML采用基于流的布局模式。这意味着大多数情况下只要一次遍历就能计算出几何信息。处于流中靠后位置元素通常不会影响
靠前位置元素的几何特征，因此布局可以按从左到右，从上至下的顺序遍历文档。但是也有例外情况，比如HTML表格的计算就需要不止一次的遍历
坐标系是相对于跟框架而建立的，使用的是上坐标和左坐标
布局是一个递归的过程。它从根呈现器（对应于HTML文档的<html>元素）开始，然后递归遍历部分或所有的框架层次结构。
为每一个需要计算的呈现器计算几何信息。
根呈现器的位置左边是0.0，其尺寸为视口（也就是浏览器窗口的可见区域），所欲的呈现器都有一个”layout"或者
“reflow"方法，每一个呈现器都会调用其需要进行布局的子代layout方法

dirty位系统
为了避免对所有细小更改都进行整体布局，浏览器采用了一种" dirty位" 系统。如果某个呈现器发生了改变，或者将自身及其子代
标注为 ”dirty"，则需要进行布局
有两种标注： “dirty" 和”children are dirty"," children are dirty"表示尽管呈现器自身没有变化，但它至少有一个子代需要布局。

全局布局和增量布局
全局布局是指触发了整个呈现树的范围的布局，触发原因可能包括：
影响所有呈现器的全局样式更改，例如字体大小更改
屏幕大小调整
布局可以采用增量方式，也就死只对dirty呈现器进行布局（这样可能存在需要进行额外布局的弊端），当呈现器为dirty时
会异步触发增量布局，例如，当来自网路的额外内容增加到DOM树之后。


CSS框模型
css框模型描述的是针对文档中的元素而生成的，并根据可视化格式模型进行布局的矩形框。
每个框都有一个内容区域（文本，图片等），还有可选的周围补白，边框和边距区域

  
  定位方案 ；三种
  普通： 根据对象在文档中的位置进行定位，也就是说对象在呈现树中的位置和它在DOM树中的位置相似，并根据其框架类型和尺寸进行布局
  浮动：对象先按照普通流进行布局，然后尽可能地向左或向右移动
  绝对： 对象在呈现树中地位置和它在DOM树中的位置不同
  
  定位方案是由“position” 和“ float" 属性设置地。
  static,relative就是普通流
  absolute和fixed就是绝对定位
  
  static定位无需定义位置，而是使用默认定位。对于其他方案，网页作者需要指定位置：top,bottom,left,right
  框地布局方式是由以下因素决定地：
  框类型 block,inline
  框尺寸
  定位方案，绝对定位，固定定位
  外部信息，例如图片大小和屏幕大小
  
  GPU图形绘制
  遍历渲染树，通过用户界面后端（UI Backend)将每个节点绘制出来
  在绘制过程中，图形处理层可能使用通用用途的CPU,也可能使用图形处理器GPU，当使用GPU用于图形渲染时，图形
  驱动软件会把任务分成多个部分，这样可以充分利用GPU强大的并行计算能力，用于在渲染过程中进行大量的
  浮点运算。
  
  
  
  
  
  
  
  
  
