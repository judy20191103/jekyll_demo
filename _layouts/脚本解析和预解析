脚本解析： 网络的模型时同步的。网页作者希望解析器遇到<script>标志时立刻解析并执行脚本。文档的解析将停止，直到脚本执行完毕。
如果脚本是外部的，那么解析过程会停止，直到从网络同步抓取资源完成后再继续。此模型已经使用了多年，也在HTML4和HTML5规范中进行了指定。作者
也可以将脚本标注为“defer",这样它就不会停止文档解析，而是等到解析结束后才执行。HTML5增加了一个选项，课将脚本标志为异步，以便由其他线程
解析和执行

预解析： webkit和firefox都进行了这项优化，在执行脚本时，其他线程会解析文档的其余部分，找出并加载需要欧
通过网络加载的其他资源。通过这种方式，资源可以在并行连接上加载，从而提高整体速度。请注意，预解析不会修改DOM
树，而是将这项工作交由主解析器处理，预解析器只会解析外部资源（例如外部脚本，样式表和图片）的引用

样式表：另一方面，样式表有着不同的模型。理论上来说，应用样式表不会更改DOM树，因此似乎没有必要
等待样式表并停止文档解析。但这设计到一个问题，就是脚本在文档解析阶段会请求样式信息。如果当时还没有加载
和解析衍圣公hi，脚本就会获得错误的回复，这样显然会产生很多问题。这看上去时一个非典型的案例，但事实上非常普遍。Firefox在样式表加载和解析的过程中，
会禁止所有脚本，而对于Webkit而言，仅当脚本尝试访问的样式属性可能受未加载的样式表影响时，它才会禁止该脚本。

呈现树构建
在DOM树构建的同时，浏览器还会构建另一个树结构：呈现树。这是由可视化元素按照其显示顺序而组成的树，
也是文档的可视化表示。它的作用是让您按照正确的顺序绘制内容
Firefox将呈现树中的元素称为框架，webkit使用的术语是呈现器或呈现对象
呈现器直到如何用布局并将其自身及其子元素绘制出来。

每一个呈现器都代表了一个矩形区域，通常对应于相关节点的CSS框，这一点在CSS2规范中有所描述。它包含诸如宽度，
高度和位置等几何信息。
框的类型会受到与节点相关的display 样式属性的影响。
